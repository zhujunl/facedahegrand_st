package com.miaxis.face.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.face.bean.Config;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIG".
*/
public class ConfigDao extends AbstractDao<Config, Long> {

    public static final String TABLENAME = "CONFIG";

    /**
     * Properties of entity Config.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UpdateUrl = new Property(1, String.class, "updateUrl", false, "UPDATE_URL");
        public final static Property UploadRecordUrl = new Property(2, String.class, "uploadRecordUrl", false, "UPLOAD_RECORD_URL");
        public final static Property AdvertisementUrl = new Property(3, String.class, "advertisementUrl", false, "ADVERTISEMENT_URL");
        public final static Property DeviceSerialNumber = new Property(4, String.class, "deviceSerialNumber", false, "DEVICE_SERIAL_NUMBER");
        public final static Property Account = new Property(5, String.class, "account", false, "ACCOUNT");
        public final static Property ClientId = new Property(6, String.class, "clientId", false, "CLIENT_ID");
        public final static Property Encrypt = new Property(7, boolean.class, "encrypt", false, "ENCRYPT");
        public final static Property VerifyMode = new Property(8, int.class, "verifyMode", false, "VERIFY_MODE");
        public final static Property NetFlag = new Property(9, boolean.class, "netFlag", false, "NET_FLAG");
        public final static Property ResultFlag = new Property(10, boolean.class, "resultFlag", false, "RESULT_FLAG");
        public final static Property SequelFlag = new Property(11, boolean.class, "sequelFlag", false, "SEQUEL_FLAG");
        public final static Property SaveLocalFlag = new Property(12, boolean.class, "saveLocalFlag", false, "SAVE_LOCAL_FLAG");
        public final static Property DocumentFlag = new Property(13, boolean.class, "documentFlag", false, "DOCUMENT_FLAG");
        public final static Property LivenessFlag = new Property(14, boolean.class, "livenessFlag", false, "LIVENESS_FLAG");
        public final static Property QueryFlag = new Property(15, boolean.class, "queryFlag", false, "QUERY_FLAG");
        public final static Property WhiteFlag = new Property(16, boolean.class, "whiteFlag", false, "WHITE_FLAG");
        public final static Property BlackFlag = new Property(17, boolean.class, "blackFlag", false, "BLACK_FLAG");
        public final static Property GatherFingerFlag = new Property(18, int.class, "gatherFingerFlag", false, "GATHER_FINGER_FLAG");
        public final static Property AdvertiseFlag = new Property(19, boolean.class, "advertiseFlag", false, "ADVERTISE_FLAG");
        public final static Property AdvertisementMode = new Property(20, int.class, "advertisementMode", false, "ADVERTISEMENT_MODE");
        public final static Property VerifyScore = new Property(21, float.class, "verifyScore", false, "VERIFY_SCORE");
        public final static Property QualityScore = new Property(22, int.class, "qualityScore", false, "QUALITY_SCORE");
        public final static Property LivenessQualityScore = new Property(23, int.class, "livenessQualityScore", false, "LIVENESS_QUALITY_SCORE");
        public final static Property TitleStr = new Property(24, String.class, "titleStr", false, "TITLE_STR");
        public final static Property Password = new Property(25, String.class, "password", false, "PASSWORD");
        public final static Property UpTime = new Property(26, String.class, "upTime", false, "UP_TIME");
        public final static Property IntervalTime = new Property(27, int.class, "intervalTime", false, "INTERVAL_TIME");
        public final static Property OrgName = new Property(28, String.class, "orgName", false, "ORG_NAME");
        public final static Property AdvertiseDelayTime = new Property(29, int.class, "advertiseDelayTime", false, "ADVERTISE_DELAY_TIME");
        public final static Property Version_delay = new Property(30, Integer.class, "version_delay", false, "VERSION_DELAY");
        public final static Property Version_position = new Property(31, Integer.class, "version_position", false, "VERSION_POSITION");
        public final static Property HeaderAngle = new Property(32, Float.class, "headerAngle", false, "HEADER_ANGLE");
        public final static Property HeaderDistance = new Property(33, Float.class, "headerDistance", false, "HEADER_DISTANCE");
    }


    public ConfigDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"UPDATE_URL\" TEXT," + // 1: updateUrl
                "\"UPLOAD_RECORD_URL\" TEXT," + // 2: uploadRecordUrl
                "\"ADVERTISEMENT_URL\" TEXT," + // 3: advertisementUrl
                "\"DEVICE_SERIAL_NUMBER\" TEXT," + // 4: deviceSerialNumber
                "\"ACCOUNT\" TEXT," + // 5: account
                "\"CLIENT_ID\" TEXT," + // 6: clientId
                "\"ENCRYPT\" INTEGER NOT NULL ," + // 7: encrypt
                "\"VERIFY_MODE\" INTEGER NOT NULL ," + // 8: verifyMode
                "\"NET_FLAG\" INTEGER NOT NULL ," + // 9: netFlag
                "\"RESULT_FLAG\" INTEGER NOT NULL ," + // 10: resultFlag
                "\"SEQUEL_FLAG\" INTEGER NOT NULL ," + // 11: sequelFlag
                "\"SAVE_LOCAL_FLAG\" INTEGER NOT NULL ," + // 12: saveLocalFlag
                "\"DOCUMENT_FLAG\" INTEGER NOT NULL ," + // 13: documentFlag
                "\"LIVENESS_FLAG\" INTEGER NOT NULL ," + // 14: livenessFlag
                "\"QUERY_FLAG\" INTEGER NOT NULL ," + // 15: queryFlag
                "\"WHITE_FLAG\" INTEGER NOT NULL ," + // 16: whiteFlag
                "\"BLACK_FLAG\" INTEGER NOT NULL ," + // 17: blackFlag
                "\"GATHER_FINGER_FLAG\" INTEGER NOT NULL ," + // 18: gatherFingerFlag
                "\"ADVERTISE_FLAG\" INTEGER NOT NULL ," + // 19: advertiseFlag
                "\"ADVERTISEMENT_MODE\" INTEGER NOT NULL ," + // 20: advertisementMode
                "\"VERIFY_SCORE\" REAL NOT NULL ," + // 21: verifyScore
                "\"QUALITY_SCORE\" INTEGER NOT NULL ," + // 22: qualityScore
                "\"LIVENESS_QUALITY_SCORE\" INTEGER NOT NULL ," + // 23: livenessQualityScore
                "\"TITLE_STR\" TEXT," + // 24: titleStr
                "\"PASSWORD\" TEXT," + // 25: password
                "\"UP_TIME\" TEXT," + // 26: upTime
                "\"INTERVAL_TIME\" INTEGER NOT NULL ," + // 27: intervalTime
                "\"ORG_NAME\" TEXT," + // 28: orgName
                "\"ADVERTISE_DELAY_TIME\" INTEGER NOT NULL ," + // 29: advertiseDelayTime
                "\"VERSION_DELAY\" INTEGER," + // 30: version_delay
                "\"VERSION_POSITION\" INTEGER," + // 31: version_position
                "\"HEADER_ANGLE\" REAL," + // 32: headerAngle
                "\"HEADER_DISTANCE\" REAL);"); // 33: headerDistance
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Config entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String updateUrl = entity.getUpdateUrl();
        if (updateUrl != null) {
            stmt.bindString(2, updateUrl);
        }
 
        String uploadRecordUrl = entity.getUploadRecordUrl();
        if (uploadRecordUrl != null) {
            stmt.bindString(3, uploadRecordUrl);
        }
 
        String advertisementUrl = entity.getAdvertisementUrl();
        if (advertisementUrl != null) {
            stmt.bindString(4, advertisementUrl);
        }
 
        String deviceSerialNumber = entity.getDeviceSerialNumber();
        if (deviceSerialNumber != null) {
            stmt.bindString(5, deviceSerialNumber);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(6, account);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(7, clientId);
        }
        stmt.bindLong(8, entity.getEncrypt() ? 1L: 0L);
        stmt.bindLong(9, entity.getVerifyMode());
        stmt.bindLong(10, entity.getNetFlag() ? 1L: 0L);
        stmt.bindLong(11, entity.getResultFlag() ? 1L: 0L);
        stmt.bindLong(12, entity.getSequelFlag() ? 1L: 0L);
        stmt.bindLong(13, entity.getSaveLocalFlag() ? 1L: 0L);
        stmt.bindLong(14, entity.getDocumentFlag() ? 1L: 0L);
        stmt.bindLong(15, entity.getLivenessFlag() ? 1L: 0L);
        stmt.bindLong(16, entity.getQueryFlag() ? 1L: 0L);
        stmt.bindLong(17, entity.getWhiteFlag() ? 1L: 0L);
        stmt.bindLong(18, entity.getBlackFlag() ? 1L: 0L);
        stmt.bindLong(19, entity.getGatherFingerFlag());
        stmt.bindLong(20, entity.getAdvertiseFlag() ? 1L: 0L);
        stmt.bindLong(21, entity.getAdvertisementMode());
        stmt.bindDouble(22, entity.getVerifyScore());
        stmt.bindLong(23, entity.getQualityScore());
        stmt.bindLong(24, entity.getLivenessQualityScore());
 
        String titleStr = entity.getTitleStr();
        if (titleStr != null) {
            stmt.bindString(25, titleStr);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(26, password);
        }
 
        String upTime = entity.getUpTime();
        if (upTime != null) {
            stmt.bindString(27, upTime);
        }
        stmt.bindLong(28, entity.getIntervalTime());
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(29, orgName);
        }
        stmt.bindLong(30, entity.getAdvertiseDelayTime());
 
        Integer version_delay = entity.getVersion_delay();
        if (version_delay != null) {
            stmt.bindLong(31, version_delay);
        }
 
        Integer version_position = entity.getVersion_position();
        if (version_position != null) {
            stmt.bindLong(32, version_position);
        }
 
        Float headerAngle = entity.getHeaderAngle();
        if (headerAngle != null) {
            stmt.bindDouble(33, headerAngle);
        }
 
        Float headerDistance = entity.getHeaderDistance();
        if (headerDistance != null) {
            stmt.bindDouble(34, headerDistance);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Config entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String updateUrl = entity.getUpdateUrl();
        if (updateUrl != null) {
            stmt.bindString(2, updateUrl);
        }
 
        String uploadRecordUrl = entity.getUploadRecordUrl();
        if (uploadRecordUrl != null) {
            stmt.bindString(3, uploadRecordUrl);
        }
 
        String advertisementUrl = entity.getAdvertisementUrl();
        if (advertisementUrl != null) {
            stmt.bindString(4, advertisementUrl);
        }
 
        String deviceSerialNumber = entity.getDeviceSerialNumber();
        if (deviceSerialNumber != null) {
            stmt.bindString(5, deviceSerialNumber);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(6, account);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(7, clientId);
        }
        stmt.bindLong(8, entity.getEncrypt() ? 1L: 0L);
        stmt.bindLong(9, entity.getVerifyMode());
        stmt.bindLong(10, entity.getNetFlag() ? 1L: 0L);
        stmt.bindLong(11, entity.getResultFlag() ? 1L: 0L);
        stmt.bindLong(12, entity.getSequelFlag() ? 1L: 0L);
        stmt.bindLong(13, entity.getSaveLocalFlag() ? 1L: 0L);
        stmt.bindLong(14, entity.getDocumentFlag() ? 1L: 0L);
        stmt.bindLong(15, entity.getLivenessFlag() ? 1L: 0L);
        stmt.bindLong(16, entity.getQueryFlag() ? 1L: 0L);
        stmt.bindLong(17, entity.getWhiteFlag() ? 1L: 0L);
        stmt.bindLong(18, entity.getBlackFlag() ? 1L: 0L);
        stmt.bindLong(19, entity.getGatherFingerFlag());
        stmt.bindLong(20, entity.getAdvertiseFlag() ? 1L: 0L);
        stmt.bindLong(21, entity.getAdvertisementMode());
        stmt.bindDouble(22, entity.getVerifyScore());
        stmt.bindLong(23, entity.getQualityScore());
        stmt.bindLong(24, entity.getLivenessQualityScore());
 
        String titleStr = entity.getTitleStr();
        if (titleStr != null) {
            stmt.bindString(25, titleStr);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(26, password);
        }
 
        String upTime = entity.getUpTime();
        if (upTime != null) {
            stmt.bindString(27, upTime);
        }
        stmt.bindLong(28, entity.getIntervalTime());
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(29, orgName);
        }
        stmt.bindLong(30, entity.getAdvertiseDelayTime());
 
        Integer version_delay = entity.getVersion_delay();
        if (version_delay != null) {
            stmt.bindLong(31, version_delay);
        }
 
        Integer version_position = entity.getVersion_position();
        if (version_position != null) {
            stmt.bindLong(32, version_position);
        }
 
        Float headerAngle = entity.getHeaderAngle();
        if (headerAngle != null) {
            stmt.bindDouble(33, headerAngle);
        }
 
        Float headerDistance = entity.getHeaderDistance();
        if (headerDistance != null) {
            stmt.bindDouble(34, headerDistance);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Config readEntity(Cursor cursor, int offset) {
        Config entity = new Config( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // updateUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uploadRecordUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // advertisementUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceSerialNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // account
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // clientId
            cursor.getShort(offset + 7) != 0, // encrypt
            cursor.getInt(offset + 8), // verifyMode
            cursor.getShort(offset + 9) != 0, // netFlag
            cursor.getShort(offset + 10) != 0, // resultFlag
            cursor.getShort(offset + 11) != 0, // sequelFlag
            cursor.getShort(offset + 12) != 0, // saveLocalFlag
            cursor.getShort(offset + 13) != 0, // documentFlag
            cursor.getShort(offset + 14) != 0, // livenessFlag
            cursor.getShort(offset + 15) != 0, // queryFlag
            cursor.getShort(offset + 16) != 0, // whiteFlag
            cursor.getShort(offset + 17) != 0, // blackFlag
            cursor.getInt(offset + 18), // gatherFingerFlag
            cursor.getShort(offset + 19) != 0, // advertiseFlag
            cursor.getInt(offset + 20), // advertisementMode
            cursor.getFloat(offset + 21), // verifyScore
            cursor.getInt(offset + 22), // qualityScore
            cursor.getInt(offset + 23), // livenessQualityScore
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // titleStr
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // password
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // upTime
            cursor.getInt(offset + 27), // intervalTime
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // orgName
            cursor.getInt(offset + 29), // advertiseDelayTime
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // version_delay
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // version_position
            cursor.isNull(offset + 32) ? null : cursor.getFloat(offset + 32), // headerAngle
            cursor.isNull(offset + 33) ? null : cursor.getFloat(offset + 33) // headerDistance
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Config entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUpdateUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUploadRecordUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdvertisementUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceSerialNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClientId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEncrypt(cursor.getShort(offset + 7) != 0);
        entity.setVerifyMode(cursor.getInt(offset + 8));
        entity.setNetFlag(cursor.getShort(offset + 9) != 0);
        entity.setResultFlag(cursor.getShort(offset + 10) != 0);
        entity.setSequelFlag(cursor.getShort(offset + 11) != 0);
        entity.setSaveLocalFlag(cursor.getShort(offset + 12) != 0);
        entity.setDocumentFlag(cursor.getShort(offset + 13) != 0);
        entity.setLivenessFlag(cursor.getShort(offset + 14) != 0);
        entity.setQueryFlag(cursor.getShort(offset + 15) != 0);
        entity.setWhiteFlag(cursor.getShort(offset + 16) != 0);
        entity.setBlackFlag(cursor.getShort(offset + 17) != 0);
        entity.setGatherFingerFlag(cursor.getInt(offset + 18));
        entity.setAdvertiseFlag(cursor.getShort(offset + 19) != 0);
        entity.setAdvertisementMode(cursor.getInt(offset + 20));
        entity.setVerifyScore(cursor.getFloat(offset + 21));
        entity.setQualityScore(cursor.getInt(offset + 22));
        entity.setLivenessQualityScore(cursor.getInt(offset + 23));
        entity.setTitleStr(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPassword(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setUpTime(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIntervalTime(cursor.getInt(offset + 27));
        entity.setOrgName(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setAdvertiseDelayTime(cursor.getInt(offset + 29));
        entity.setVersion_delay(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setVersion_position(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setHeaderAngle(cursor.isNull(offset + 32) ? null : cursor.getFloat(offset + 32));
        entity.setHeaderDistance(cursor.isNull(offset + 33) ? null : cursor.getFloat(offset + 33));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Config entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Config entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Config entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
