package com.miaxis.face.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.face.bean.IDCardRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IDCARD_RECORD".
*/
public class IDCardRecordDao extends AbstractDao<IDCardRecord, Long> {

    public static final String TABLENAME = "IDCARD_RECORD";

    /**
     * Properties of entity IDCardRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardType = new Property(1, String.class, "cardType", false, "CARD_TYPE");
        public final static Property CardId = new Property(2, String.class, "cardId", false, "CARD_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property CardNumber = new Property(6, String.class, "cardNumber", false, "CARD_NUMBER");
        public final static Property IssuingAuthority = new Property(7, String.class, "issuingAuthority", false, "ISSUING_AUTHORITY");
        public final static Property ValidateStart = new Property(8, String.class, "validateStart", false, "VALIDATE_START");
        public final static Property ValidateEnd = new Property(9, String.class, "validateEnd", false, "VALIDATE_END");
        public final static Property Sex = new Property(10, String.class, "sex", false, "SEX");
        public final static Property Nation = new Property(11, String.class, "nation", false, "NATION");
        public final static Property Fingerprint0 = new Property(12, String.class, "fingerprint0", false, "FINGERPRINT0");
        public final static Property FingerprintPosition0 = new Property(13, String.class, "fingerprintPosition0", false, "FINGERPRINT_POSITION0");
        public final static Property Fingerprint1 = new Property(14, String.class, "fingerprint1", false, "FINGERPRINT1");
        public final static Property FingerprintPosition1 = new Property(15, String.class, "fingerprintPosition1", false, "FINGERPRINT_POSITION1");
        public final static Property PassNumber = new Property(16, String.class, "passNumber", false, "PASS_NUMBER");
        public final static Property IssueCount = new Property(17, String.class, "issueCount", false, "ISSUE_COUNT");
        public final static Property ChineseName = new Property(18, String.class, "chineseName", false, "CHINESE_NAME");
        public final static Property Version = new Property(19, String.class, "version", false, "VERSION");
        public final static Property CardPhotoPath = new Property(20, String.class, "cardPhotoPath", false, "CARD_PHOTO_PATH");
        public final static Property FacePhotoPath = new Property(21, String.class, "facePhotoPath", false, "FACE_PHOTO_PATH");
        public final static Property VerifyMode = new Property(22, int.class, "verifyMode", false, "VERIFY_MODE");
        public final static Property FaceResult = new Property(23, boolean.class, "faceResult", false, "FACE_RESULT");
        public final static Property FingerResult = new Property(24, boolean.class, "fingerResult", false, "FINGER_RESULT");
        public final static Property FaceScore = new Property(25, float.class, "faceScore", false, "FACE_SCORE");
        public final static Property FingerScore = new Property(26, float.class, "fingerScore", false, "FINGER_SCORE");
        public final static Property VerifyResult = new Property(27, boolean.class, "verifyResult", false, "VERIFY_RESULT");
        public final static Property VerifyTime = new Property(28, java.util.Date.class, "verifyTime", false, "VERIFY_TIME");
        public final static Property OrgName = new Property(29, String.class, "orgName", false, "ORG_NAME");
        public final static Property Describe = new Property(30, String.class, "describe", false, "DESCRIBE");
        public final static Property Location = new Property(31, String.class, "location", false, "LOCATION");
        public final static Property Upload = new Property(32, boolean.class, "upload", false, "UPLOAD");
    }


    public IDCardRecordDao(DaoConfig config) {
        super(config);
    }
    
    public IDCardRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IDCARD_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CARD_TYPE\" TEXT," + // 1: cardType
                "\"CARD_ID\" TEXT," + // 2: cardId
                "\"NAME\" TEXT," + // 3: name
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"ADDRESS\" TEXT," + // 5: address
                "\"CARD_NUMBER\" TEXT," + // 6: cardNumber
                "\"ISSUING_AUTHORITY\" TEXT," + // 7: issuingAuthority
                "\"VALIDATE_START\" TEXT," + // 8: validateStart
                "\"VALIDATE_END\" TEXT," + // 9: validateEnd
                "\"SEX\" TEXT," + // 10: sex
                "\"NATION\" TEXT," + // 11: nation
                "\"FINGERPRINT0\" TEXT," + // 12: fingerprint0
                "\"FINGERPRINT_POSITION0\" TEXT," + // 13: fingerprintPosition0
                "\"FINGERPRINT1\" TEXT," + // 14: fingerprint1
                "\"FINGERPRINT_POSITION1\" TEXT," + // 15: fingerprintPosition1
                "\"PASS_NUMBER\" TEXT," + // 16: passNumber
                "\"ISSUE_COUNT\" TEXT," + // 17: issueCount
                "\"CHINESE_NAME\" TEXT," + // 18: chineseName
                "\"VERSION\" TEXT," + // 19: version
                "\"CARD_PHOTO_PATH\" TEXT," + // 20: cardPhotoPath
                "\"FACE_PHOTO_PATH\" TEXT," + // 21: facePhotoPath
                "\"VERIFY_MODE\" INTEGER NOT NULL ," + // 22: verifyMode
                "\"FACE_RESULT\" INTEGER NOT NULL ," + // 23: faceResult
                "\"FINGER_RESULT\" INTEGER NOT NULL ," + // 24: fingerResult
                "\"FACE_SCORE\" REAL NOT NULL ," + // 25: faceScore
                "\"FINGER_SCORE\" REAL NOT NULL ," + // 26: fingerScore
                "\"VERIFY_RESULT\" INTEGER NOT NULL ," + // 27: verifyResult
                "\"VERIFY_TIME\" INTEGER," + // 28: verifyTime
                "\"ORG_NAME\" TEXT," + // 29: orgName
                "\"DESCRIBE\" TEXT," + // 30: describe
                "\"LOCATION\" TEXT," + // 31: location
                "\"UPLOAD\" INTEGER NOT NULL );"); // 32: upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IDCARD_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IDCardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindString(2, cardType);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(3, cardId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(7, cardNumber);
        }
 
        String issuingAuthority = entity.getIssuingAuthority();
        if (issuingAuthority != null) {
            stmt.bindString(8, issuingAuthority);
        }
 
        String validateStart = entity.getValidateStart();
        if (validateStart != null) {
            stmt.bindString(9, validateStart);
        }
 
        String validateEnd = entity.getValidateEnd();
        if (validateEnd != null) {
            stmt.bindString(10, validateEnd);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(11, sex);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(12, nation);
        }
 
        String fingerprint0 = entity.getFingerprint0();
        if (fingerprint0 != null) {
            stmt.bindString(13, fingerprint0);
        }
 
        String fingerprintPosition0 = entity.getFingerprintPosition0();
        if (fingerprintPosition0 != null) {
            stmt.bindString(14, fingerprintPosition0);
        }
 
        String fingerprint1 = entity.getFingerprint1();
        if (fingerprint1 != null) {
            stmt.bindString(15, fingerprint1);
        }
 
        String fingerprintPosition1 = entity.getFingerprintPosition1();
        if (fingerprintPosition1 != null) {
            stmt.bindString(16, fingerprintPosition1);
        }
 
        String passNumber = entity.getPassNumber();
        if (passNumber != null) {
            stmt.bindString(17, passNumber);
        }
 
        String issueCount = entity.getIssueCount();
        if (issueCount != null) {
            stmt.bindString(18, issueCount);
        }
 
        String chineseName = entity.getChineseName();
        if (chineseName != null) {
            stmt.bindString(19, chineseName);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(20, version);
        }
 
        String cardPhotoPath = entity.getCardPhotoPath();
        if (cardPhotoPath != null) {
            stmt.bindString(21, cardPhotoPath);
        }
 
        String facePhotoPath = entity.getFacePhotoPath();
        if (facePhotoPath != null) {
            stmt.bindString(22, facePhotoPath);
        }
        stmt.bindLong(23, entity.getVerifyMode());
        stmt.bindLong(24, entity.getFaceResult() ? 1L: 0L);
        stmt.bindLong(25, entity.getFingerResult() ? 1L: 0L);
        stmt.bindDouble(26, entity.getFaceScore());
        stmt.bindDouble(27, entity.getFingerScore());
        stmt.bindLong(28, entity.getVerifyResult() ? 1L: 0L);
 
        java.util.Date verifyTime = entity.getVerifyTime();
        if (verifyTime != null) {
            stmt.bindLong(29, verifyTime.getTime());
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(30, orgName);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(31, describe);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(32, location);
        }
        stmt.bindLong(33, entity.getUpload() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IDCardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindString(2, cardType);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(3, cardId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(7, cardNumber);
        }
 
        String issuingAuthority = entity.getIssuingAuthority();
        if (issuingAuthority != null) {
            stmt.bindString(8, issuingAuthority);
        }
 
        String validateStart = entity.getValidateStart();
        if (validateStart != null) {
            stmt.bindString(9, validateStart);
        }
 
        String validateEnd = entity.getValidateEnd();
        if (validateEnd != null) {
            stmt.bindString(10, validateEnd);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(11, sex);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(12, nation);
        }
 
        String fingerprint0 = entity.getFingerprint0();
        if (fingerprint0 != null) {
            stmt.bindString(13, fingerprint0);
        }
 
        String fingerprintPosition0 = entity.getFingerprintPosition0();
        if (fingerprintPosition0 != null) {
            stmt.bindString(14, fingerprintPosition0);
        }
 
        String fingerprint1 = entity.getFingerprint1();
        if (fingerprint1 != null) {
            stmt.bindString(15, fingerprint1);
        }
 
        String fingerprintPosition1 = entity.getFingerprintPosition1();
        if (fingerprintPosition1 != null) {
            stmt.bindString(16, fingerprintPosition1);
        }
 
        String passNumber = entity.getPassNumber();
        if (passNumber != null) {
            stmt.bindString(17, passNumber);
        }
 
        String issueCount = entity.getIssueCount();
        if (issueCount != null) {
            stmt.bindString(18, issueCount);
        }
 
        String chineseName = entity.getChineseName();
        if (chineseName != null) {
            stmt.bindString(19, chineseName);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(20, version);
        }
 
        String cardPhotoPath = entity.getCardPhotoPath();
        if (cardPhotoPath != null) {
            stmt.bindString(21, cardPhotoPath);
        }
 
        String facePhotoPath = entity.getFacePhotoPath();
        if (facePhotoPath != null) {
            stmt.bindString(22, facePhotoPath);
        }
        stmt.bindLong(23, entity.getVerifyMode());
        stmt.bindLong(24, entity.getFaceResult() ? 1L: 0L);
        stmt.bindLong(25, entity.getFingerResult() ? 1L: 0L);
        stmt.bindDouble(26, entity.getFaceScore());
        stmt.bindDouble(27, entity.getFingerScore());
        stmt.bindLong(28, entity.getVerifyResult() ? 1L: 0L);
 
        java.util.Date verifyTime = entity.getVerifyTime();
        if (verifyTime != null) {
            stmt.bindLong(29, verifyTime.getTime());
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(30, orgName);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(31, describe);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(32, location);
        }
        stmt.bindLong(33, entity.getUpload() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IDCardRecord readEntity(Cursor cursor, int offset) {
        IDCardRecord entity = new IDCardRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cardType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cardNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // issuingAuthority
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // validateStart
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // validateEnd
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sex
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nation
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fingerprint0
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fingerprintPosition0
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fingerprint1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fingerprintPosition1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // passNumber
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // issueCount
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // chineseName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // version
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // cardPhotoPath
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // facePhotoPath
            cursor.getInt(offset + 22), // verifyMode
            cursor.getShort(offset + 23) != 0, // faceResult
            cursor.getShort(offset + 24) != 0, // fingerResult
            cursor.getFloat(offset + 25), // faceScore
            cursor.getFloat(offset + 26), // fingerScore
            cursor.getShort(offset + 27) != 0, // verifyResult
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // verifyTime
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // orgName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // describe
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // location
            cursor.getShort(offset + 32) != 0 // upload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IDCardRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCardNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIssuingAuthority(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setValidateStart(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setValidateEnd(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSex(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFingerprint0(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFingerprintPosition0(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFingerprint1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFingerprintPosition1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPassNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIssueCount(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setChineseName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setVersion(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCardPhotoPath(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFacePhotoPath(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setVerifyMode(cursor.getInt(offset + 22));
        entity.setFaceResult(cursor.getShort(offset + 23) != 0);
        entity.setFingerResult(cursor.getShort(offset + 24) != 0);
        entity.setFaceScore(cursor.getFloat(offset + 25));
        entity.setFingerScore(cursor.getFloat(offset + 26));
        entity.setVerifyResult(cursor.getShort(offset + 27) != 0);
        entity.setVerifyTime(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setOrgName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDescribe(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setLocation(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setUpload(cursor.getShort(offset + 32) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IDCardRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IDCardRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IDCardRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
