package com.miaxis.face.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.face.bean.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CardNo = new Property(2, String.class, "cardNo", false, "CARD_NO");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property BusEntity = new Property(6, String.class, "busEntity", false, "BUS_ENTITY");
        public final static Property Status = new Property(7, String.class, "status", false, "STATUS");
        public final static Property CardImg = new Property(8, String.class, "cardImg", false, "CARD_IMG");
        public final static Property FaceImg = new Property(9, String.class, "faceImg", false, "FACE_IMG");
        public final static Property Finger0 = new Property(10, String.class, "finger0", false, "FINGER0");
        public final static Property Finger1 = new Property(11, String.class, "finger1", false, "FINGER1");
        public final static Property PrintFinger = new Property(12, String.class, "printFinger", false, "PRINT_FINGER");
        public final static Property Location = new Property(13, String.class, "location", false, "LOCATION");
        public final static Property Longitude = new Property(14, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(15, String.class, "latitude", false, "LATITUDE");
        public final static Property CreateDate = new Property(16, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Devsn = new Property(17, String.class, "devsn", false, "DEVSN");
        public final static Property CardId = new Property(18, String.class, "cardId", false, "CARD_ID");
        public final static Property HasUp = new Property(19, boolean.class, "hasUp", false, "HAS_UP");
        public final static Property Validate = new Property(20, String.class, "validate", false, "VALIDATE");
        public final static Property Race = new Property(21, String.class, "race", false, "RACE");
        public final static Property RegOrg = new Property(22, String.class, "regOrg", false, "REG_ORG");
        public final static Property Type = new Property(23, String.class, "type", false, "TYPE");
        public final static Property ChineseName = new Property(24, String.class, "chineseName", false, "CHINESE_NAME");
        public final static Property PassNum = new Property(25, String.class, "passNum", false, "PASS_NUM");
        public final static Property IssueNum = new Property(26, String.class, "issueNum", false, "ISSUE_NUM");
    }


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CARD_NO\" TEXT," + // 2: cardNo
                "\"SEX\" TEXT," + // 3: sex
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"ADDRESS\" TEXT," + // 5: address
                "\"BUS_ENTITY\" TEXT," + // 6: busEntity
                "\"STATUS\" TEXT," + // 7: status
                "\"CARD_IMG\" TEXT," + // 8: cardImg
                "\"FACE_IMG\" TEXT," + // 9: faceImg
                "\"FINGER0\" TEXT," + // 10: finger0
                "\"FINGER1\" TEXT," + // 11: finger1
                "\"PRINT_FINGER\" TEXT," + // 12: printFinger
                "\"LOCATION\" TEXT," + // 13: location
                "\"LONGITUDE\" TEXT," + // 14: longitude
                "\"LATITUDE\" TEXT," + // 15: latitude
                "\"CREATE_DATE\" INTEGER," + // 16: createDate
                "\"DEVSN\" TEXT," + // 17: devsn
                "\"CARD_ID\" TEXT," + // 18: cardId
                "\"HAS_UP\" INTEGER NOT NULL ," + // 19: hasUp
                "\"VALIDATE\" TEXT," + // 20: validate
                "\"RACE\" TEXT," + // 21: race
                "\"REG_ORG\" TEXT," + // 22: regOrg
                "\"TYPE\" TEXT," + // 23: type
                "\"CHINESE_NAME\" TEXT," + // 24: chineseName
                "\"PASS_NUM\" TEXT," + // 25: passNum
                "\"ISSUE_NUM\" TEXT);"); // 26: issueNum
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "idx_id ON \"RECORD\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(3, cardNo);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String busEntity = entity.getBusEntity();
        if (busEntity != null) {
            stmt.bindString(7, busEntity);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }
 
        String cardImg = entity.getCardImg();
        if (cardImg != null) {
            stmt.bindString(9, cardImg);
        }
 
        String faceImg = entity.getFaceImg();
        if (faceImg != null) {
            stmt.bindString(10, faceImg);
        }
 
        String finger0 = entity.getFinger0();
        if (finger0 != null) {
            stmt.bindString(11, finger0);
        }
 
        String finger1 = entity.getFinger1();
        if (finger1 != null) {
            stmt.bindString(12, finger1);
        }
 
        String printFinger = entity.getPrintFinger();
        if (printFinger != null) {
            stmt.bindString(13, printFinger);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(14, location);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(15, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(16, latitude);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(17, createDate.getTime());
        }
 
        String devsn = entity.getDevsn();
        if (devsn != null) {
            stmt.bindString(18, devsn);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(19, cardId);
        }
        stmt.bindLong(20, entity.getHasUp() ? 1L: 0L);
 
        String validate = entity.getValidate();
        if (validate != null) {
            stmt.bindString(21, validate);
        }
 
        String race = entity.getRace();
        if (race != null) {
            stmt.bindString(22, race);
        }
 
        String regOrg = entity.getRegOrg();
        if (regOrg != null) {
            stmt.bindString(23, regOrg);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(24, type);
        }
 
        String chineseName = entity.getChineseName();
        if (chineseName != null) {
            stmt.bindString(25, chineseName);
        }
 
        String passNum = entity.getPassNum();
        if (passNum != null) {
            stmt.bindString(26, passNum);
        }
 
        String issueNum = entity.getIssueNum();
        if (issueNum != null) {
            stmt.bindString(27, issueNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(3, cardNo);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String busEntity = entity.getBusEntity();
        if (busEntity != null) {
            stmt.bindString(7, busEntity);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }
 
        String cardImg = entity.getCardImg();
        if (cardImg != null) {
            stmt.bindString(9, cardImg);
        }
 
        String faceImg = entity.getFaceImg();
        if (faceImg != null) {
            stmt.bindString(10, faceImg);
        }
 
        String finger0 = entity.getFinger0();
        if (finger0 != null) {
            stmt.bindString(11, finger0);
        }
 
        String finger1 = entity.getFinger1();
        if (finger1 != null) {
            stmt.bindString(12, finger1);
        }
 
        String printFinger = entity.getPrintFinger();
        if (printFinger != null) {
            stmt.bindString(13, printFinger);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(14, location);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(15, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(16, latitude);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(17, createDate.getTime());
        }
 
        String devsn = entity.getDevsn();
        if (devsn != null) {
            stmt.bindString(18, devsn);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(19, cardId);
        }
        stmt.bindLong(20, entity.getHasUp() ? 1L: 0L);
 
        String validate = entity.getValidate();
        if (validate != null) {
            stmt.bindString(21, validate);
        }
 
        String race = entity.getRace();
        if (race != null) {
            stmt.bindString(22, race);
        }
 
        String regOrg = entity.getRegOrg();
        if (regOrg != null) {
            stmt.bindString(23, regOrg);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(24, type);
        }
 
        String chineseName = entity.getChineseName();
        if (chineseName != null) {
            stmt.bindString(25, chineseName);
        }
 
        String passNum = entity.getPassNum();
        if (passNum != null) {
            stmt.bindString(26, passNum);
        }
 
        String issueNum = entity.getIssueNum();
        if (issueNum != null) {
            stmt.bindString(27, issueNum);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // busEntity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cardImg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // faceImg
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // finger0
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // finger1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // printFinger
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // location
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // longitude
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // latitude
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // createDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // devsn
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // cardId
            cursor.getShort(offset + 19) != 0, // hasUp
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // validate
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // race
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // regOrg
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // type
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // chineseName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // passNum
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // issueNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBusEntity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCardImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFaceImg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFinger0(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFinger1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrintFinger(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLocation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLongitude(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLatitude(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreateDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setDevsn(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCardId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHasUp(cursor.getShort(offset + 19) != 0);
        entity.setValidate(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRace(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRegOrg(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setType(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setChineseName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPassNum(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIssueNum(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
