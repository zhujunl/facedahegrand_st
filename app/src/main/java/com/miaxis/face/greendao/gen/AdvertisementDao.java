package com.miaxis.face.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.face.bean.Advertisement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADVERTISEMENT".
*/
public class AdvertisementDao extends AbstractDao<Advertisement, Long> {

    public static final String TABLENAME = "ADVERTISEMENT";

    /**
     * Properties of entity Advertisement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property DelayTime = new Property(3, int.class, "delayTime", false, "DELAY_TIME");
        public final static Property StartDate = new Property(4, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(5, String.class, "endDate", false, "END_DATE");
    }


    public AdvertisementDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertisementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADVERTISEMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"URL\" TEXT," + // 2: url
                "\"DELAY_TIME\" INTEGER NOT NULL ," + // 3: delayTime
                "\"START_DATE\" TEXT," + // 4: startDate
                "\"END_DATE\" TEXT);"); // 5: endDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADVERTISEMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Advertisement entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
        stmt.bindLong(4, entity.getDelayTime());
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(5, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(6, endDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Advertisement entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
        stmt.bindLong(4, entity.getDelayTime());
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(5, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(6, endDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Advertisement readEntity(Cursor cursor, int offset) {
        Advertisement entity = new Advertisement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.getInt(offset + 3), // delayTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // endDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Advertisement entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDelayTime(cursor.getInt(offset + 3));
        entity.setStartDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Advertisement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Advertisement entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Advertisement entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
